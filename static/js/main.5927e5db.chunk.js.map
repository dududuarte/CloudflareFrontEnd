{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","posts","newUpload","bind","getPosts","a","fetch","resp","json","postsResp","setState","MySwal","withReactContent","Swal","fire","title","html","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","preConfirm","document","getElementById","value","showValidationMessage","then","result","isConfirmed","requestOptions","method","body","JSON","stringify","username","content","upvotes","downvotes","console","log","response","position","icon","showConfirmButton","timer","setTimeout","window","location","reload","className","Button","onClick","this","map","post","Card","Header","style","textAling","Body","Text","Footer","faChevronUp","faChevronDown","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5927e5db.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons'\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass App extends React.Component{\n  constructor(props){\n  super(props);\n  this.state = { posts: []};\n  this.newUpload = this.newUpload.bind(this);\n// this.upVote = this.upVote.bind(this);\n  }\n\ncomponentDidMount(){\n  const getPosts = async () => {\n      const resp = await fetch(\n        \"https://serverless-api.duartemcg.workers.dev/posts\"\n      );\n      const postsResp = await resp.json();\n      this.setState({ posts: postsResp});\n    };\n    getPosts();\n}\n\n/*upVote(post) {\n  post = {... post, upvotes: (post.upvotes + 1)}\n   const requestOptions = {\n        method: 'PUT',\n        body: post,\n    };\n    console.log(requestOptions.body);\n    fetch('https://serverless-api.duartemcg.workers.dev/posts', requestOptions)\n        .then(response => response.json());\n}*/\n\n\nnewUpload() {\n  const MySwal = withReactContent(Swal);\n  MySwal.fire({\n    title: 'Add new post',\n    html: '<input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"Title\" required>' +\n    '<input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"Username\" required>'+\n    '<input id=\"swal-input3\" class=\"swal2-input\" placeholder=\"Content\" required>',\n    showCancelButton: true,\n    confirmButtonColor: '#3085d6',\n    cancelButtonColor: '#d33',\n    confirmButtonText: 'Add',\n    cancelButtonText: 'Cancel',\n    preConfirm: () => {\n\n      if((document.getElementById('swal-input1').value == \"\") || (document.getElementById('swal-input1').value == '') || ((document.getElementById('swal-input1').value == null)) && (document.getElementById('swal-input2').value == \"\") || (document.getElementById('swal-input2').value == '') || ((document.getElementById('swal-input2').value == null)) && (document.getElementById('swal-input3').value == \"\") || (document.getElementById('swal-input3').value == '') || ((document.getElementById('swal-input3').value == null)) ){\n        Swal.showValidationMessage(\n          `All fields are required fields`\n        )\n      }\n    }\n  }).then((result) => {\n    if (result.isConfirmed) {\n      const requestOptions = {\n        method: 'POST',\n        body: JSON.stringify({ title: document.getElementById('swal-input1').value, username: document.getElementById('swal-input2').value, content: document.getElementById('swal-input3').value, upvotes: 0, downvotes: 0 })\n    };\n    console.log(requestOptions.body);\n    fetch('https://serverless-api.duartemcg.workers.dev/posts', requestOptions)\n        .then(response => response.json())\n        .then(MySwal.fire({\n          position: 'top-end',\n          icon: 'success',\n          title: 'Your post has been posted',\n          showConfirmButton: false,\n          timer: 2000\n        }))\n        .then(setTimeout(function() { window.location.reload(); }, 2000));\n    }\n    else{\n      MySwal.fire({\n        position: 'top-end',\n        icon: 'error',\n        title: 'Operation Cancelled',\n        showConfirmButton: false,\n        timer: 1500\n      })\n    }\n    \n  })\n  \n}\n\n  render(){\n  return (\n    <div>\n    <div className=\"add\"><Button onClick={this.newUpload}>Add new Post</Button></div>\n\n    <div className=\"align-item-center\">\n        {this.state.posts.map(post => (\n          <Card className=\"card\" key={post.id}>\n          <Card.Header style={{textAling: 'left'}}>{post.title} | By: {post.username}</Card.Header>\n    <Card.Body>\n    <Card.Text>\n    {post.content}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer className=\"text-muted\"><FontAwesomeIcon icon={faChevronUp} /> {post.upvotes} <FontAwesomeIcon icon={faChevronDown} /> {post.downvotes}</Card.Footer>\n  \n</Card>\n        ))  }\n  \n    </div>\n    </div>\n  );\n  \n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}